{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCGA,IADI,EAyFA,EAAQ,EAAQ,EAAM,EAxFtB,EAAQ,EAGN,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAS,SAAS,aAAa,CAAC,WAClC,EAAc,CAAA,EAmClB,SAAS,EAAW,CAAI,CAAE,CAAG,EAC3B,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAC,KAAK,CAAG,GACvB,EAAK,SAAS,CAAC,GAAG,CAAC,cAEf,EAAM,IACR,EAAK,SAAS,CAAG,EACjB,EAAK,SAAS,CAAC,GAAG,CAAE,eAAkB,MAAA,CAAJ,IAEtC,CAkIA,SAAS,EAAY,CAAG,EACtB,OAAO,EAAI,MAAM,CAAC,SAAA,CAAlB,EAAyB,OAAA,AAAQ,IAAR,C,EAC3B,CAEA,SAAS,EAAM,CAAG,EAGhB,IAAK,IAFD,EAAS,EAAY,GAEhB,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,GAAS,CAAM,CAAC,EAAE,EAMtB,IAFA,EAAS,EAAY,GAEd,EAAO,MAAM,CApMN,GAqMZ,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,CAEA,SAAS,IAGP,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAI,EAAG,EA/ML,EA+Me,IAAK,CAC7B,IAAI,EAAM,CAAK,CAAC,EAAE,CACZ,EAAe,EAAG,GAExB,EAAM,EAAM,GACZ,CAAK,CAAC,EAAE,CAAG,EAEN,EAAY,EAAa,IAC5B,CAAA,EAAQ,CAAA,CADV,EAIA,IAAK,IAAI,EAAI,EAAG,EAzNJ,EAyNiB,IAI3B,EAHa,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IACxD,CAAK,CAAC,EAAE,CAAC,EAAE,CAI3B,CAEI,GACF,GAEJ,CAEA,SAAS,IAGP,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAI,EAAG,EA1OL,EA0Oe,IAAK,CAC7B,IAAI,EAAM,CAAK,CAAC,EAAE,CACZ,EAAe,EAAG,GAExB,EAAI,OAAO,GAEX,AADA,CAAA,EAAM,EAAM,EAAZ,EACI,OAAO,GACX,CAAK,CAAC,EAAE,CAAG,EAEN,EAAY,EAAa,IAC5B,CAAA,EAAQ,CAAA,CADV,EAIA,IAAK,IAAI,EAAI,EAAG,EAtPJ,EAsPiB,IAI3B,EAHa,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IACxD,CAAK,CAAC,EAAE,CAAC,EAAE,CAI3B,CAEI,GACF,GAEJ,CAEA,SAAS,IAGP,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAI,EAAG,EAtQF,EAsQe,IAAK,CAChC,IAAI,EAAM,CAAC,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAKzD,EAJgB,EAAG,GAExB,EAAM,EAAM,KAGV,CAAA,EAAQ,CAAA,CADV,EAIA,IAAK,IAAI,EAAI,EAAG,EAjRP,EAiRiB,IACxB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAKpB,EAHa,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IACxD,CAAK,CAAC,EAAE,CAAC,EAAE,CAI3B,CAEI,GACF,GAEJ,CAEA,SAAS,IAGP,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAI,EAAG,EAlSF,EAkSe,IAAK,CAChC,IAAI,EAAM,CAAC,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CACxD,EAAe,EAAG,GAExB,EAAI,OAAO,GAEX,AADA,CAAA,EAAM,EAAM,EAAZ,EACI,OAAO,GAEN,EAAY,EAAa,IAC5B,CAAA,EAAQ,CAAA,CADV,EAIA,IAAK,IAAI,EAAI,EAAG,EA/SP,EA+SiB,IACxB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAKpB,EAHa,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IACxD,CAAK,CAAC,EAAE,CAAC,EAAE,CAI3B,CAEI,GACF,GAEJ,CAEA,SAAS,IACP,IAAK,IAAI,EAAI,EAAG,EA/TL,EA+Te,IACxB,IAAK,IAAI,EAAI,EAAG,EA/TJ,EA+TiB,IAC3B,GAAI,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CACb,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAEA,SAAS,IACP,GAAK,IAML,IAFA,IAAI,EAAQ,CAAA,EAEL,CAAC,GAAO,CACb,IAAM,EAAI,KAAK,KAAK,CAAC,AAlVZ,EAkVY,KAAK,MAAM,IAC1B,EAAI,KAAK,KAAK,CAAC,AAlVT,EAkVS,KAAK,MAAM,IAEhC,GAAI,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAQ,CACrB,IAAM,EAAO,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IAC9D,EAAM,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAEtC,CAAA,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,EACd,EAAK,SAAS,CAAG,EACjB,EAAK,SAAS,CAAC,GAAG,CAAE,eAAkB,MAAA,CAAJ,IAClC,EAAQ,CAAA,CACV,CACF,CACF,CAEA,SAAS,IAIP,IAAK,IAHC,EAAY,CAAC,IACf,EAAO,CAAA,EAEF,EAAI,EAAG,EArWL,EAqWe,IACxB,IAAK,IAAI,EAAI,EAAG,EArWJ,EAqWiB,IACvB,EAAI,GAAK,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CAC1C,EAAO,CAAA,EACE,EAAI,GAAe,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CAC3D,EAAO,CAAA,EACE,EAAI,GAAY,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CACxD,EAAO,CAAA,EACE,EAAI,GAAK,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAI,EAAE,CAAC,EAAE,EACjD,CAAA,EAAO,CAAA,CADF,EAMX,OAAO,GAAQ,CACjB,CAEA,SAAS,IACP,IAAK,IAAI,EAAI,EAAG,EAvXL,EAuXe,IACxB,IAAK,IAAI,EAAI,EAAG,EAvXJ,EAuXiB,IAC3B,GAAI,AAAgB,OAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CACb,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAEA,SAAS,EAAY,CAAI,CAAE,CAAI,EAC7B,GAAI,EAAK,MAAM,GAAK,EAAK,MAAM,CAC7B,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAC/B,GAAI,CAAI,CAAC,EAAE,GAAK,CAAI,CAAC,EAAE,CACrB,MAAO,CAAA,EAIX,MAAO,CAAA,CACT,CAlYA,OAAO,MAAM,CAAG,YACd,AAGF,WACE,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAK,IAAI,EAAI,EAAG,EAxBL,EAwBe,IACxB,IAAK,IAAI,EAAI,EAAG,EAxBJ,EAwBiB,IAAK,CAChC,IAAM,EAAO,SAAS,aAAa,CAAC,OAEpC,EAAK,SAAS,CAAC,GAAG,CAAC,cACnB,EAAK,EAAE,CAAG,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,GAIzC,EAAW,EAFC,CAAK,CAAC,EAAE,CAAC,EAAE,EAGvB,SAAS,aAAa,CAAC,eAAe,MAAM,CAAC,EAC/C,CAGF,EAAc,CAAA,CAChB,GAzBA,EAsCA,SAAS,gBAAgB,CAAC,QAAS,SAAA,CAAnC,EACE,GAAK,GAIL,OAAQ,EAAE,IAAI,EACZ,IAnDS,YAoDP,IACA,KAEF,KAtDU,aAuDR,IACA,KAEF,KAzDO,UA0DL,IACA,KAEF,KA5DS,YA6DP,GAEJ,CAEA,SAAS,aAAa,CAAC,eAAe,SAAS,CAAG,EAE9C,KACF,EAAY,SAAS,CAAC,MAAM,CAAC,UAG3B,KACF,EAAW,SAAS,CAAC,MAAM,CAAC,UAEhC,GAKA,SAAS,gBAAgB,CAAC,aAAc,SAAA,CAAxC,EACO,IAIL,EAAS,EAAE,OAAO,CAAC,EAAE,CAAC,KAAK,CAC3B,EAAS,EAAE,OAAO,CAAC,EAAE,CAAC,KAAK,CAC7B,GAEA,SAAS,gBAAgB,CAAC,WAAY,SAAA,CAAtC,EACE,GAAK,GAIL,EAAO,EAAE,cAAc,CAAC,EAAE,CAAC,KAAK,CAChC,EAAO,EAAE,cAAc,CAAC,EAAE,CAAC,KAAK,CAEhC,IAAM,EAAS,EAAO,EAChB,EAAS,EAAO,CAGlB,CAAA,KAAK,GAAG,CAAC,GAAU,KAAK,GAAG,CAAC,GAC1B,KAAK,GAAG,CAAC,GAHU,KAIjB,EAAS,EACX,IAEA,KAIA,KAAK,GAAG,CAAC,GAXU,KAYjB,EAAS,EACX,IAEA,KAKN,SAAS,aAAa,CAAC,eAAe,SAAS,CAAG,EAE9C,KACF,EAAY,SAAS,CAAC,MAAM,CAAC,UAG3B,KACF,EAAW,SAAS,CAAC,MAAM,CAAC,UAEhC,GAEA,EAAO,gBAAgB,CAAC,QAAS,WAC3B,GACF,EAAO,SAAS,CAAC,MAAM,CAAC,WACxB,EAAO,SAAS,CAAC,GAAG,CAAC,SACrB,EAAO,SAAS,CAAG,QACnB,EAAc,CAAA,EACd,AAYJ,WACE,EAAQ,EACR,SAAS,aAAa,CAAC,eAAe,SAAS,CAAG,EAClD,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAa,SAAS,CAAC,MAAM,CAAC,UAE9B,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAK,IAAI,EAAI,EAAG,EA1KF,EA0Ke,IAC3B,IAAK,IAAI,EAAI,EAAG,EA5KP,EA4KiB,IAGxB,EAFa,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IAEnD,EAGvB,MA/BI,EAAO,SAAS,CAAC,MAAM,CAAC,SACxB,EAAO,SAAS,CAAC,GAAG,CAAC,WACrB,EAAO,SAAS,CAAG,UACnB,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAc,CAAA,EACd,IACA,IAEJ","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar board;\nvar score = 0;\nvar rows = 4;\nvar columns = 4;\nvar startMessage = document.querySelector(\".message-start\");\nvar winMessage = document.querySelector(\".message-win\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar button = document.querySelector(\".button\");\nvar gameStarted = false;\nvar LEFT = \"ArrowLeft\";\nvar RIGHT = \"ArrowRight\";\nvar UP = \"ArrowUp\";\nvar DOWN = \"ArrowDown\";\nwindow.onload = function() {\n    setGame();\n};\nfunction setGame() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var tile = document.createElement(\"div\");\n        tile.classList.add(\"field-cell\");\n        tile.id = r.toString() + \"-\" + c.toString();\n        var num = board[r][c];\n        updateTile(tile, num);\n        document.querySelector(\".game-field\").append(tile);\n    }\n    gameStarted = false;\n}\nfunction updateTile(tile, num) {\n    tile.innerText = \"\";\n    tile.classList.value = \"\";\n    tile.classList.add(\"field-cell\");\n    if (num > 0) {\n        tile.innerText = num;\n        tile.classList.add(\"field-cell--\".concat(num));\n    }\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    if (!gameStarted) return;\n    switch(e.code){\n        case LEFT:\n            slideLeft();\n            break;\n        case RIGHT:\n            slideRight();\n            break;\n        case UP:\n            slideUp();\n            break;\n        case DOWN:\n            slideDown();\n            break;\n    }\n    document.querySelector(\".game-score\").innerHTML = score;\n    if (isGameOver()) loseMessage.classList.remove(\"hidden\");\n    if (isWinner()) winMessage.classList.remove(\"hidden\");\n});\n// for mobile-devices\nvar startX, startY, endX, endY;\ndocument.addEventListener(\"touchstart\", function(e) {\n    if (!gameStarted) return;\n    startX = e.touches[0].pageX;\n    startY = e.touches[0].pageY;\n});\ndocument.addEventListener(\"touchend\", function(e) {\n    if (!gameStarted) return;\n    endX = e.changedTouches[0].pageX;\n    endY = e.changedTouches[0].pageY;\n    var deltaX = endX - startX;\n    var deltaY = endY - startY;\n    var minSwipeDistance = 20;\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        if (Math.abs(deltaX) > minSwipeDistance) {\n            if (deltaX > 0) slideRight();\n            else slideLeft();\n        }\n    } else if (Math.abs(deltaY) > minSwipeDistance) {\n        if (deltaY > 0) slideDown();\n        else slideUp();\n    }\n    document.querySelector(\".game-score\").innerHTML = score;\n    if (isGameOver()) loseMessage.classList.remove(\"hidden\");\n    if (isWinner()) winMessage.classList.remove(\"hidden\");\n});\nbutton.addEventListener(\"click\", function() {\n    if (gameStarted) {\n        button.classList.remove(\"restart\");\n        button.classList.add(\"start\");\n        button.innerHTML = \"Start\";\n        gameStarted = false;\n        resetGame();\n    } else {\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n        button.innerHTML = \"Restart\";\n        startMessage.classList.add(\"hidden\");\n        gameStarted = true;\n        setNum();\n        setNum();\n    }\n});\nfunction resetGame() {\n    score = 0;\n    document.querySelector(\".game-score\").innerHTML = score;\n    winMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    startMessage.classList.remove(\"hidden\");\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    for(var c = 0; c < columns; c++)for(var r = 0; r < rows; r++){\n        var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n        updateTile(tile, 0);\n    }\n}\nfunction filterZeros(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction slide(row) {\n    var newRow = filterZeros(row);\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        score += newRow[i];\n    }\n    newRow = filterZeros(newRow);\n    while(newRow.length < columns)newRow.push(0);\n    return newRow;\n}\nfunction slideLeft() {\n    var moved = false;\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        var originalRow = _to_consumable_array(row);\n        row = slide(row);\n        board[r] = row;\n        if (!arraysEqual(originalRow, row)) moved = true;\n        for(var c = 0; c < columns; c++){\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n    if (moved) setNum();\n}\nfunction slideRight() {\n    var moved = false;\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        var originalRow = _to_consumable_array(row);\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        board[r] = row;\n        if (!arraysEqual(originalRow, row)) moved = true;\n        for(var c = 0; c < columns; c++){\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n    if (moved) setNum();\n}\nfunction slideUp() {\n    var moved = false;\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var originalRow = _to_consumable_array(row);\n        row = slide(row);\n        if (!arraysEqual(originalRow, row)) moved = true;\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n    if (moved) setNum();\n}\nfunction slideDown() {\n    var moved = false;\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var originalRow = _to_consumable_array(row);\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        if (!arraysEqual(originalRow, row)) moved = true;\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n    if (moved) setNum();\n}\nfunction hasEmptyTile() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction setNum() {\n    if (!hasEmptyTile()) return;\n    var found = false;\n    while(!found){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (board[r][c] === 0) {\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = Math.random() < 0.9 ? 2 : 4;\n            board[r][c] = num;\n            tile.innerText = num;\n            tile.classList.add(\"field-cell--\".concat(num));\n            found = true;\n        }\n    }\n}\nfunction isGameOver() {\n    var fullBoard = !hasEmptyTile();\n    var move = true;\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (c > 0 && board[r][c] === board[r][c - 1]) move = false;\n        else if (c < columns - 1 && board[r][c] === board[r][c + 1]) move = false;\n        else if (r < rows - 1 && board[r][c] === board[r + 1][c]) move = false;\n        else if (r > 0 && board[r][c] === board[r - 1][c]) move = false;\n    }\n    return move && fullBoard;\n}\nfunction isWinner() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === 2048) return true;\n    }\n    return false;\n}\nfunction arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    for(var i = 0; i < arr1.length; i++){\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\n\n//# sourceMappingURL=index.1783c96e.js.map\n","'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst button = document.querySelector('.button');\nlet gameStarted = false;\nconst LEFT = 'ArrowLeft';\nconst RIGHT = 'ArrowRight';\nconst UP = 'ArrowUp';\nconst DOWN = 'ArrowDown';\n\nwindow.onload = function() {\n  setGame();\n};\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.createElement('div');\n\n      tile.classList.add('field-cell');\n      tile.id = r.toString() + '-' + c.toString();\n\n      const num = board[r][c];\n\n      updateTile(tile, num);\n      document.querySelector('.game-field').append(tile);\n    }\n  }\n\n  gameStarted = false;\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n    tile.classList.add(`field-cell--${num}`);\n  }\n}\n\ndocument.addEventListener('keyup', e => {\n  if (!gameStarted) {\n    return;\n  }\n\n  switch (e.code) {\n    case LEFT:\n      slideLeft();\n      break;\n\n    case RIGHT:\n      slideRight();\n      break;\n\n    case UP:\n      slideUp();\n      break;\n\n    case DOWN:\n      slideDown();\n      break;\n  }\n\n  document.querySelector('.game-score').innerHTML = score;\n\n  if (isGameOver()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (isWinner()) {\n    winMessage.classList.remove('hidden');\n  }\n});\n\n// for mobile-devices\nlet startX, startY, endX, endY;\n\ndocument.addEventListener('touchstart', e => {\n  if (!gameStarted) {\n    return;\n  }\n\n  startX = e.touches[0].pageX;\n  startY = e.touches[0].pageY;\n});\n\ndocument.addEventListener('touchend', e => {\n  if (!gameStarted) {\n    return;\n  }\n\n  endX = e.changedTouches[0].pageX;\n  endY = e.changedTouches[0].pageY;\n\n  const deltaX = endX - startX;\n  const deltaY = endY - startY;\n  const minSwipeDistance = 20;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (Math.abs(deltaX) > minSwipeDistance) {\n      if (deltaX > 0) {\n        slideRight();\n      } else {\n        slideLeft();\n      }\n    }\n  } else {\n    if (Math.abs(deltaY) > minSwipeDistance) {\n      if (deltaY > 0) {\n        slideDown();\n      } else {\n        slideUp();\n      }\n    }\n  }\n\n  document.querySelector('.game-score').innerHTML = score;\n\n  if (isGameOver()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (isWinner()) {\n    winMessage.classList.remove('hidden');\n  }\n});\n\nbutton.addEventListener('click', () => {\n  if (gameStarted) {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.innerHTML = 'Start';\n    gameStarted = false;\n    resetGame();\n  } else {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerHTML = 'Restart';\n    startMessage.classList.add('hidden');\n    gameStarted = true;\n    setNum();\n    setNum();\n  }\n});\n\nfunction resetGame() {\n  score = 0;\n  document.querySelector('.game-score').innerHTML = score;\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startMessage.classList.remove('hidden');\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let c = 0; c < columns; c++) {\n    for (let r = 0; r < rows; r++) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      updateTile(tile, 0);\n    }\n  }\n}\n\nfunction filterZeros(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterZeros(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = filterZeros(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  let moved = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n    const originalRow = [...row];\n\n    row = slide(row);\n    board[r] = row;\n\n    if (!arraysEqual(originalRow, row)) {\n      moved = true;\n    }\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n\n  if (moved) {\n    setNum();\n  }\n};\n\nfunction slideRight() {\n  let moved = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n    const originalRow = [...row];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    board[r] = row;\n\n    if (!arraysEqual(originalRow, row)) {\n      moved = true;\n    }\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n\n  if (moved) {\n    setNum();\n  }\n};\n\nfunction slideUp() {\n  let moved = false;\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const originalRow = [...row];\n\n    row = slide(row);\n\n    if (!arraysEqual(originalRow, row)) {\n      moved = true;\n    }\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n\n  if (moved) {\n    setNum();\n  }\n}\n\nfunction slideDown() {\n  let moved = false;\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const originalRow = [...row];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    if (!arraysEqual(originalRow, row)) {\n      moved = true;\n    }\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n\n  if (moved) {\n    setNum();\n  }\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setNum() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = Math.random() < 0.9 ? 2 : 4;\n\n      board[r][c] = num;\n      tile.innerText = num;\n      tile.classList.add(`field-cell--${num}`);\n      found = true;\n    }\n  }\n}\n\nfunction isGameOver() {\n  const fullBoard = !hasEmptyTile();\n  let move = true;\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (c > 0 && board[r][c] === board[r][c - 1]) {\n        move = false;\n      } else if (c < columns - 1 && board[r][c] === board[r][c + 1]) {\n        move = false;\n      } else if (r < rows - 1 && board[r][c] === board[r + 1][c]) {\n        move = false;\n      } else if (r > 0 && board[r][c] === board[r - 1][c]) {\n        move = false;\n      }\n    }\n  }\n\n  return move && fullBoard;\n}\n\nfunction isWinner() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","board","startX","startY","endX","endY","score","startMessage","document","querySelector","winMessage","loseMessage","button","gameStarted","updateTile","tile","num","innerText","classList","value","add","concat","filterZeros","row","filter","slide","newRow","push","slideLeft","moved","r","originalRow","arraysEqual","c","getElementById","setNum","slideRight","reverse","slideUp","slideDown","hasEmptyTile","found","Math","floor","random","isGameOver","fullBoard","move","columns","rows","isWinner","arr1","window","onload","setGame","createElement","id","append","addEventListener","e","code","innerHTML","remove","touches","pageX","pageY","changedTouches","deltaX","deltaY","abs","resetGame"],"version":3,"file":"index.1783c96e.js.map"}